# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1reix1Ha1fdSN2chHQhtingMWIvx1ls5D
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data files
ideal_data = pd.read_csv('/content/Hackathon_Ideal_Data.csv')
mapping_file = pd.read_csv('/content/Hackathon_Mapping_File.csv')
validation_data = pd.read_csv('/content/Hackathon_Validation_Data.csv')
working_data = pd.read_csv('/content/Hackathon_Working_Data.csv')

# Display the first few rows of each dataset
print("Ideal Data:")
print(ideal_data.head())

print("\nMapping File:")
print(mapping_file.head())

print("\nValidation Data:")
print(validation_data.head())

print("\nWorking Data:")
print(working_data.head())

# Get basic info and statistics for each dataset
print("\nIdeal Data Info:")
print(ideal_data.info())

print("\nMapping File Info:")
print(mapping_file.info())

print("\nValidation Data Info:")
print(validation_data.info())

print("\nWorking Data Info:")
print(working_data.info())

# Summary statistics for numerical columns
print("\nIdeal Data Summary Statistics:")
print(ideal_data.describe())

print("\nValidation Data Summary Statistics:")
print(validation_data.describe())

print("\nWorking Data Summary Statistics:")
print(working_data.describe())

# Data Cleaning and Preprocessing

# Example of merging datasets if they have a common key, e.g., 'customer_id'

# Perform the merge on multiple columns
merged_data = pd.merge(working_data, ideal_data, on=['QTY', 'VALUE'],)  # List of columns to merge on how='left'

# Display the first few rows of the merged dataset
print("\nMerged Data:")
print(merged_data.head())

# Check the info of the merged dataset
print("\nMerged Data Info:")
print(merged_data.info())

# Example of handling missing values in merged data
merged_data.fillna(method='ffill', inplace=True)

# Distribution of a numerical column, e.g., 'VALUE'
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.histplot(merged_data['VALUE'], bins=50, kde=True)
plt.title('Distribution of VALUE')
plt.xlabel('VALUE')
plt.ylabel('Frequency')
plt.show()

# Transactions Over Time (if applicable)
if 'DAY' in merged_data.columns:
    transactions_over_time = merged_data.groupby(merged_data['DAY']).size()
    plt.figure(figsize=(12, 6))
    transactions_over_time.plot()
    plt.title('Number of Transactions Over Time')
    plt.xlabel('Day')
    plt.ylabel('Number of Transactions')
    plt.grid(True)
    plt.show()

# Spending Patterns by Product (if 'product' exists)
if 'product' in merged_data.columns:
    plt.figure(figsize=(12, 6))
    sns.boxplot(x='product', y='VALUE', data=merged_data)
    plt.title('Spending Patterns by Product')
    plt.xlabel('Product')
    plt.ylabel('VALUE')
    plt.show()

# Create a dummy customer_id based on transaction_id for demonstration
merged_data['customer_id'] = merged_data.index  # Assigning unique index as customer_id

# Customer Segmentation Based on Spending
# Assuming 'total_spending' needs to be calculated
#if 'VALUE' in merged_data.columns:
#    merged_data['total_spending'] = merged_data.groupby('customer_id')['VALUE'].transform('sum')
#    merged_data['spending_segment'] = pd.qcut(merged_data['total_spending'], 4, labels=['Low', 'Medium', 'High', 'Very High'])
#
#    plt.figure(figsize=(12, 6))
#    sns.countplot(x='spending_segment', data=merged_data)
#    plt.title('Customer Segmentation by Spending')
#    plt.xlabel('Spending Segment')
#    plt.ylabel('Number of Customers')
#    plt.show()

# Customer Segmentation Based on Spending
# Assuming 'total_spending' needs to be calculated
if 'VALUE' in merged_data.columns:
    merged_data['total_spending'] = merged_data.groupby('customer_id')['VALUE'].transform('sum')

    # Remove duplicate total_spending values to avoid issues with qcut
    unique_total_spending = merged_data['total_spending'].drop_duplicates()

    # Create spending segments using pd.cut
    merged_data['spending_segment'] = pd.cut(
        merged_data['total_spending'],
        bins=[0, 10, 20, 100, merged_data['total_spending'].max()],
        labels=['Low', 'Medium', 'High', 'Very High'],
        include_lowest=True
    )

    plt.figure(figsize=(12, 6))
    sns.countplot(x='spending_segment', data=merged_data)
    plt.title('Customer Segmentation by Spending')
    plt.xlabel('Spending Segment')
    plt.ylabel('Number of Customers')
    plt.show()
else:
    print("The column 'VALUE' is not present in the merged dataset.")

